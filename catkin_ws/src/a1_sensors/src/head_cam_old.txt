cv::Point HeadCamera::detectColourAndShape(const ImageConstPtr& msg_rgb, std::string& color, std::string& shape) {
    cv_bridge::CvImagePtr cv_ptr;
    cv::Mat image, hsv, mask;

    try {
        cv_ptr = cv_bridge::toCvCopy(*msg_rgb, sensor_msgs::image_encodings::TYPE_8UC3);
        image = cv_ptr->image;
        cv::cvtColor(image, hsv, CV_BGR2HSV);
        
        // Red 
        cv::inRange(hsv, cv::Scalar(0, 120, 70), cv::Scalar(10, 255, 255), mask);
        if (cv::countNonZero(mask) > 500) { // threshold, adjust accordingly
            color = "Red";
        } else {
            // Blue 
            cv::inRange(hsv, cv::Scalar(100, 150, 0), cv::Scalar(140, 255, 255), mask);
            if (cv::countNonZero(mask) > 500) {
                color = "Blue";
            } else {
                return cv::Point(-1, -1); // Other/no colour detected
            }
        }
        
        std::vector<std::vector<cv::Point>> contours;
        cv::findContours(mask, contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);

        // assuming the largest contour is our object
        double maxArea = 0;
        std::vector<cv::Point> largestContour;
        for (const auto& contour : contours) {
            double area = cv::contourArea(contour);
            if (area > maxArea) {
                maxArea = area;
                largestContour = contour;
            }
        }
        
        // needs to be edited
        double perimeter = cv::arcLength(largestContour, true);
        double roundness = 4 * CV_PI * maxArea / (perimeter * perimeter);
        
        if (roundness > 0.4) {  // adjust threshold as needed depends on what is present
            shape = "Cylinder";
        } else {
            shape = "Cube";
        }
        
        cv::Moments m = cv::moments(mask, true);
        return cv::Point(m.m10/m.m00, m.m01/m.m00);
    } catch (cv_bridge::Exception& e) {
        ROS_ERROR("cv_bridge exception in detectColor: %s", e.what());
        return cv::Point(-1, -1); // invalid point to signify error --> error mnmgmnt
    }
}